//OpenPWA Ver 1.5 This version is based on GPU calculation
//Gradient of FCN is provided in  version 1.2
//Local memory optimization is applied in version 1.3
//Vectorization is added in version 1.4
//Reduction is optimized with up to 58% workitems used, significant improvement on performance
//Author: Liu Kun, liuk@ihep.ac.cm
//Created: 2010.11.5
//Last modified: 2010.11.30

#include <iostream>
#include <fstream>
#include <vector>
#include <string>

#include <CL/cl.h>

#include <TComplex.h>
#include "Math/Minimizer.h"

#include "config.h"
#include "log.h"

#define MAXPAR 50
#define PI 3.14159265358979312

typedef struct par_info
{
  cl_int       index;
  cl_float     step;
  string       tag;
  string       name;
  cl_float     min;
  cl_float     max;

}ParameterInfo;

typedef struct fit_res
{
  int status;
  double s;

  double val[MAXPAR];
  double err[MAXPAR];

}FitResult;


class OpenPWA
{
 public:

  ///Constructor, set the name of the config file
  OpenPWA(string configFileName);
  ///Destructor
  virtual ~OpenPWA();


  /********* ***Used for outside call*****************/
  ///Initialization
  void init();

  ///Make random start value of the parameters
  void randomizeParameters(int seed = 0);
  ///Output fitted parameters
  void printParameters();
  ///Set values of all parameters
  void setAllParValue(const double *par);
  ///Get values of all parameters
  void getAllParValue(double *par);
  ///Set values of all parameters
  void setParValue(int i, float val) { fParVal[i] = val; }
  ///Get values of all parameters
  double getParValue(int i) { return double(fParVal[i]); }
  ///Get converted values of a parameter
  double getConvParValue(int i, int j) { return double(fPa[i*fNwave+j]); }
  ///Get number of all parameters
  const int getNpar() {return fNpar;}
  ///Get the ith parameter
  ParameterInfo getParInfo(int i) { return fParInfo[i]; }
  ///Get the gradients of parameters
  double *getParGradients() { return fParGrad; }

  ///Likelihood calculator, by serial CPU calls
  double nll_cpu();
  ///Likelihood calculator, bu openCL on GPU
  double nll_cl();

  ///Save the results for one iteration
  void saveOptResult(ROOT::Math::Minimizer *minimizer);
  ///Show the best result
  void showBestResult();
  ///Show the top n best result
  void showTopResults(unsigned int n);

  ///Stadard interface for wrapper of ROOT::Math::Functor and GradFunctor
  double Eval_CPU(const double *par);
  double Eval_GPU(const double *par);
  double Derivative(const double *par, int icoord);

  /********* ***Used for internal call*****************/
  ///Read FUN of MC
  void readMCIntegral();
  ///Read FUNALL of data
  void readData();
  ///Initialize the openCL environment
  void initializeCL();
  ///Clean up the openCL environment
  void finalizeCL();
  ///Intitialize the relative parameters
  void initializeParameters();

  ///Convert the parameters to complex amplitudes
  void convertAmplitudeBES();
  ///The same function as above, only used in the calculation of gradients
  void convertAmplitudeBES_grad();
  ///Convert the parameters to complex amplitudes
  void convertAmplitudeFDC();
  ///The same function as above, only used in the calculation of gradients
  void convertAmplitudeFDC_grad();


  ///Read .cl files and converto the content to string
  string readKernelFile(string filename);
  

 private:

  //For configuration
  Config                  *fConfig;
  cl_int                  fNMC;
  cl_int                  fNevt;
  cl_int                  fNpar;
  cl_int                  fNwave;
  cl_int                  fNwave2;  //Square of fNwave

  cl_int                  fNbunch;

  string                  fMCIntegral;
  string                  fDataFunall;
  string                  fParaInp;
  
  //Fit parameters
  ParameterInfo           *fParInfo;
  cl_float                *fParVal;
  TComplex                *fAmp;
  TComplex                *fAmp_FDC;
  cl_float                *fPa;
  cl_float                *fPa_grad;
  //Following variables should be pre-generated by Fortran code
  cl_float                *fFunall;
  cl_float                *fWeight;
  cl_float                *fFunMC;

  //Calculated event-by-event on GPU
  cl_float                *fNll;
  //cl_float                *fGrad;

  //Gradients
  double                  *fParGrad;  
  double                  *fWaveGrad;
  double                  fStepSize;

  //For debug and benchmark only
  double                  *fTime;

  //Function pointer for convertAmplitude
  /* void                    (*convertAmplitude)(); */
  /* void                    (*convertAmplitude_grad)(); */

  //Interface for FDC
  bool                    fEnable_FDC;

  //Store the results of each optimization iteration
  vector<FitResult>       fFitResults;

  //openCL host
  bool                    fEnable_CL;                  
  cl_platform_id          platform;
  cl_context              context;
  cl_device_id            *devices;
  cl_device_id            device;
  cl_program              program;
  cl_kernel               kernel;
  cl_command_queue        queue;
  cl_mem                  buffer_funall;
  cl_mem                  buffer_nll;
  //cl_mem                  buffer_grad;
  cl_mem                  buffer_par;

  cl_event                event_kernel;
  cl_event                event_nll;
  //cl_event                event_grad;

  size_t                  globalSize;
  size_t                  localSize;
  cl_int                  nBlocks;
  cl_int                  nPrefold;
};
